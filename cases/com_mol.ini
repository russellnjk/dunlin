[model_1]
states = 
	x0 = [1, 1],
	x1 = [1, 1.05],
	x2 = [1, 1],
	x3 = [1, 0.93],
	x4 = [1, 1.04],
	y0 = [1, 1.02],
	y1 = [1, 1.1],
	y2 = [1, 1],
	y3 = [1, 0.98],
	y4 = [1, 0.9]

params = 
	Jx   = [5e-4],
	Jy   = [5e-2],
	synx = [8e-2],
	syny = [8e-2],
	degx = [5e-2],
	degy = [5e-2],
	kx   = [5e-1]

combinations =
	Jx = [1e-4, 1e-3],
	Jy = [1e-2, 1e-1]
	
equations = 
	
	x0_1 = x1-x0
	x1_2 = x2-x1
	x2_3 = x3-x2
	x3_4 = x4-x3
	
	dx0 = Jx*x0_1           + synx*x0**2/(y0**2 + kx**2) - degx*x0
	dx1 = Jx*x1_2 - Jx*x0_1 + synx*x1**2/(y1**2 + kx**2) - degx*x1
	dx2 = Jx*x2_3 - Jx*x1_2 + synx*x2**2/(y2**2 + kx**2) - degx*x2
	dx3 = Jx*x3_4 - Jx*x2_3 + synx*x3**2/(y3**2 + kx**2) - degx*x3
	dx4 =         - Jx*x3_4 + synx*x4**2/(y4**2 + kx**2) - degx*x4
	
	y0_1 = y1-y0
	y1_2 = y2-y1
	y2_3 = y3-y2
	y3_4 = y4-y3
	
	dy0 = Jy*y0_1           + syny*x0**2/(y0**2 + kx**2) - degy*y0
	dy1 = Jy*y1_2 - Jy*y0_1 + syny*x1**2/(y0**2 + kx**2) - degy*y1
	dy2 = Jy*y2_3 - Jy*y1_2 + syny*x2**2/(y0**2 + kx**2) - degy*y2
	dy3 = Jy*y3_4 - Jy*y2_3 + syny*x3**2/(y0**2 + kx**2) - degy*y3
	dy4 =         - Jy*y3_4 + syny*x4**2/(y0**2 + kx**2) - degy*y4

tspan = 
	linspace(0, 500, 21)

objective_cx_diff =
	
	_x0 = x0.values[-1] 
	_x1 = x1.values[-1] 
	_x2 = x2.values[-1] 
	_x3 = x3.values[-1] 
	_x4 = x4.values[-1] 
	
	difference = _x4 - _x3 + _x2 - _x3 + _x2 - _x1 + _x0 - _x1
	
	return difference
	
; objective_cx_final =
	
	; _x0 = x0.values[-1] 
	; _x1 = x1.values[-1] 
	; _x2 = x2.values[-1] 
	; _x3 = x3.values[-1] 
	; _x4 = x4.values[-1] 
	
	
	; return [0, 1 , 2, 3, 4], [_x0, _x1, _x2, _x3, _x4]
	
; objective_cy_final =
	
	; _y0 = y0.values[-1] 
	; _y1 = y1.values[-1] 
	; _y2 = y2.values[-1] 
	; _y3 = y3.values[-1] 
	; _y4 = y4.values[-1] 
	
	
	; return [0, 1 , 2, 3, 4], [_y0, _y1, _y2, _y3, _y4]