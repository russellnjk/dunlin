[_constants]
Naa  = 4.16e8
R0   = 0.05

[coarse_1]
;All time in min
;Biomass in 1e9 cells/mL

; solver_args = 
	; method = "Radau"

;x should correctly be thought of as unit cells defined in https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6415661/
;Concentration of x is in 1e8 unit cells/mL i.e. OD unit cells
states = 
	x = [0.05]*6,
	S = [2.2e4]*6,
	P = [0]*6,
	Q = [${_constants:Naa}*0.45]*6,
	R = [${_constants:Naa}*${_constants:R0}]*6,
	M = [${_constants:Naa}*(0.55 - ${_constants:R0})]*6,
	H = [0]*6
	
params = 
	Mcell      = [${_constants:Naa}]*5,
	v_uptake   = [200]*5, 
	k_uptake   = [5e3, 1e4, 1.5e4, 2e4, 4e4],
	n_uptake   = [1]*5,
	ntf        = [1]*5,
	yield_S    = [0.083]*5,
	v_synprot  = [1080]*5,
	k_synprot  = [5e-3]*5,
	k_fr       = [0.05]*5,
	n_fr       = [2]*5, 
	fq         = [0.45]*5,
	fr         = [1]*5,
	fm         = [0.65]*5,
	fh         = [0.5]*5,
	k_ind      = [0.5]*5,
	k_cm       = [3]*5,
	v_uptake2  = [200]*5, 
	k_uptake2  = [2e3, 5e3, 1e4, 1.5e4, 2e4]

inputs =
	dil  = [[0]*2 + [5e-3, 1e-2, 1.5e-2, 2e-2]],
	Sin  = [[0]*2 + [1e5]*4,                  ],
	ind  = [[0    ]*6,                        ],
	Cm   = [[0    ]*6,                        ]

step_size =
	v_uptake   = 100,
	k_uptake   = 2e3,
	k_synprot  = 1e-3,
	k_fr       = 5e-2,
	v_uptake2  = 100,
	k_uptake2  = 2e3
	
param_bounds =
	v_uptake   = [10, 5e3],
	k_uptake   = [5e2, 9e4],
	k_fr       = [1e-2, 10],
	k_synprot  = [1e-3, 1e-1],
	v_uptake2  = [10, 5e3], 
	k_uptake2  = [5e2, 9e4]

cf_iterations = 10000

tspan = 
	[i*10 for i in range(0, 10)] + [i*100 for i in range(1, 11)] 
	
equations = 
	@use_numba 
	n_H = H/300
	n_Q = Q/300
	n_M = M/300
	n_R = R/7459
	
	#Cell density (protein conc)in uM
	#Cell volume in L
	all_prot = Q +R +M +H
	; Vcell    = (all_prot*1e6/6e23)/Dcell
	P_conc   = P/all_prot
	
	#Uptake
	#Need to convert OD to cells
	#Convert from OD to umol: *cells_per_OD/6e23*1e3*1e6
	#Convert from molecs to umol: /6e17
	cells_per_OD = 2.4e9
	uM_cells     = x*cells_per_OD/6e23*1e3*1e6
	uptake       = v_uptake*n_M*S**n_uptake/(S**n_uptake + k_uptake**n_uptake)
	total_uptake = uptake*uM_cells
	
	#Translation
	#Need to convert from molecs to umol
	r_sat   = P_conc/(P_conc + k_synprot)
	r_inh   = k_cm/(Cm + k_cm)	
	synprot = v_synprot*n_R*r_sat*r_inh

	#R feedback	
	PR  = P/R
	reg = PR**n_fr/(k_fr**n_fr + PR**n_fr) *(1-0.046) + 0.046
	fr_ = fr*reg
	; fr_ = np.maximum(fr*reg, 0.046)
	
	#Induction
	fh_ = fh*ind/(k_ind + ind)
	
	#Split pools
	synp = uptake*yield_S
	synQ = synprot*fq
	synM = synprot*(1-fq)*fm /(fm + fr_ + fh_)
	synR = synprot*(1-fq)*fr_/(fm + fr_ + fh_)
	synH = synprot*(1-fq)*fh_/(fm + fr_ + fh_)
	
	#Growth rate
	mu = (synQ +synM +synR)/Mcell
	
	dS = -dil*S +dil*Sin -total_uptake
	dx = -dil*x +x*mu 
	dP = -mu*P +synp -synprot
	dQ = -mu*Q +synQ
	dR = -mu*R +synR
	dM = -mu*M +synM
	dH = -mu*H +synH

exv_P_conc = 
	@use_numba
	return t, P_conc

exv_r_sat = 
	return t, r_sat

exv_mu = 
	@use_numba
	return t, mu

exv_reg =
	@use_numba
	return PR, reg, 'o'
	
exv_r_sat_vs_mu = 
	
	return mu[-1:], r_sat[-1:], 'o'
	
exv_r_sat_vs_R_frac = 
	R_frac = R/all_prot
	
	return R_frac[-1:], r_sat[-1:], 'o'
	
exv_R_frac_vs_mu =
	R_frac = R/all_prot
	
	return mu[-1:], R_frac[-1:], 'o'

exv_R_frac = 
	@use_numba
	R_frac = R/all_prot
	
	return t, R_frac
	
exv_R_frac_ss =
	@use_numba
	gradient  = 5.78656638987421
	intercept = 0.03648482880435973
	
	R_frac_data  = gradient*mu + intercept
	R_frac_model = R/all_prot 
	
	return R_frac_data-R_frac_model
	
modify =
	yield_S_dict  = {'LB': 0.094, 'M9': 0.105}
	yield_S = 2 if type(scenario) == int else yield_S_dict.get(scenario, 0.083)
	
	if scenario == 'M9':
	|	v_uptake = v_uptake2
	|	k_uptake = k_uptake2
	