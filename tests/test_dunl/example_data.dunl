
#This is a comment

#The semicolon ; denotes a directory 
;a #Comments can come at the end of a line too

;a;aa 
#This means aa is nested under a

#This code block corresponds to 
#dct = {
# 'aa0' : 0, 
# 'aa1' : [1, 2], 
# 'aa2' : [1, 1],
# 'aa3' : {'x': 'xx', 'y': 'yy', 'z': 'zz'},
# 'aa4' : {'x': 'xx', 'y': 'yy', 'z': 'zz'}
#}
#Where {'a': {'aa': dct}}
aa0 : 0
aa1 : [1, 2]
aa2 : [1]*2
aa3 : [x : xx, y : yy, z : zz]
aa4 : [
	x : xx, 
	y : yy, 
	z : zz
	]

#When the code becomes repetitive, you can make use of shorthands and interpolators to simplify things
;b;horizontal
#This code block demonstrates horizontal shorthands
#Horizontal shorthands let you compress an element when it contains repetitive code
#Each pair contains the same values
x0 : [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
x1 : [!range, 0, 20, 2!] #This is useful when you specify the time span for numerical integration

x2 : [a, c, e, g, i, k, m, o, q]
x3 : [!range, a, q, 2!] #This is useful when you work with many similar namespaces

x4 : [constant_abc, constant_def, constant_hij, constant_klm, constant_nop, constant_qrs, constant_tuv, constant_wxy]
x5 : [!comma, constant_{}, abc, def, hij, klm, nop, qrs, tuv, wxy!] #This is useful when you work with many similar namespaces

x6 : constant_abc + constant_def + constant_hij + constant_klm + constant_nop + constant_qrs + constant_tuv + constant_wxy
x7 : !plus, constant_{}, abc, def, hij, klm, nop, qrs, tuv, wxy! #This is useful when you work with many similar namespaces

#This code block demonstrates vertical shorthands
#Vertical shorthands allow you to create multiple elements using a single template
;;vertical;no_shorthands
x : [a: 0, b:1, c: 2, d: 3, e: 4]
y : [a: 0, b:1, c: 3, d: 3, e: 4]
z : [a: 0, b:1, c: 4, d: 3, e: 4]

;;;with_shorthands
{key}: [a: 0, b: 1, c: {value}, d: 3, e: 4]
	$key   : x, y, z
	$value : 2, 3, 4

#This code block demonstrates interpolators
#Interpolators allow you to reuse chunks of code across your code
`i` a: 0, b : 1, c: 2, d: {value}

`names` q, r, s, t, u, v, w, x,  y,  z

;;interpolation
{key} : [`i`, e: 4]
	$key   : `names`
	$value : 3, 4, 5, 6, 7, 8, 9, 10, 11, 12

some_quantity : ( !plus, {}, `names` ! )/2
