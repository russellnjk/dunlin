def model_M0_dct(time, states, parameters, _cytosolic2extracellular, _adv_cytosolic_1_left, _adv_cytosolic_1_right, _vol_cytosolic, _adv_cytosolic_2_left, _adv_cytosolic_2_right, _adv_extracellular_1_left, _adv_extracellular_1_right, _vol_extracellular, _adv_extracellular_2_left, _adv_extracellular_2_right, _dfn_cytosolic_1_left, _dfn_cytosolic_2_left, _dfn_extracellular_1_left, _dfn_extracellular_2_left, _bc_extracellular_2_min, _bc_extracellular_2_max, _bc_extracellular_1_min, _bc_extracellular_1_max):

	#States
	A = states[0:4]
	B = states[4:8]
	C = states[8:20]
	D = states[20:32]

	#Parameters
	k_degA = parameters[0]
	k_synB = parameters[1]
	k_synD = parameters[2]
	k_degD = parameters[3]
	k_pump = parameters[4]
	J_B = parameters[5]
	J_C_x = parameters[6]
	J_C_y = parameters[7]
	F_B = parameters[8]
	F_C_x = parameters[9]
	F_C_y = parameters[10]

	#Diffs
	_d_A = __zeros(A.shape, __float64)
	_d_B = __zeros(B.shape, __float64)
	_d_C = __zeros(C.shape, __float64)
	_d_D = __zeros(D.shape, __float64)

	#Functions
	def func0(x, k):
		return -x*k

	#Variables
	#vrb0
	vrb0 = func0(k_degA, A)

	#vrb1
	vrb1 = k_pump*B[_cytosolic2extracellular["cytosolic_idx"]]*C[_cytosolic2extracellular["extracellular_idx"]]

	#vrb2
	vrb2 = 1

	#vrb3
	vrb3 = vrb0[_cytosolic2extracellular["cytosolic_idx"]]*vrb1*vrb2


	#Reactions
	#synB
	synB = k_synB

	_d_B += 1*synB

	#pumpB
	pumpB = k_pump*B[_cytosolic2extracellular["cytosolic_idx"]]

	__surface_reaction(_d_B, _cytosolic2extracellular["cytosolic_idx"], -1, pumpB, _cytosolic2extracellular["area"], _cytosolic2extracellular["cytosolic_volume"])

	__surface_reaction(_d_C, _cytosolic2extracellular["extracellular_idx"], 1, pumpB, _cytosolic2extracellular["area"], _cytosolic2extracellular["extracellular_volume"])

	#synD
	synD = k_synD*C - vrb2*D

	_d_C += -1*synD
	_d_D += 1*synD


	#Advection B
	_adv_B = __zeros(B.shape)
	_adv_B += __advection(B, F_B, _adv_cytosolic_1_left, _adv_cytosolic_1_right, _vol_cytosolic)
	_adv_B += __advection(B, F_B, _adv_cytosolic_2_left, _adv_cytosolic_2_right, _vol_cytosolic)
	_d_B += _adv_B

	#Advection C
	_adv_C = __zeros(C.shape)
	_adv_C += __advection(C, F_C_x, _adv_extracellular_1_left, _adv_extracellular_1_right, _vol_extracellular)
	_adv_C += __advection(C, F_C_y, _adv_extracellular_2_left, _adv_extracellular_2_right, _vol_extracellular)
	_d_C += _adv_C

	#Advection D
	_adv_D = __zeros(D.shape)
	_adv_D += __advection(D, 1, _adv_extracellular_1_left, _adv_extracellular_1_right, _vol_extracellular)
	_adv_D += __advection(D, 1, _adv_extracellular_2_left, _adv_extracellular_2_right, _vol_extracellular)
	_d_D += _adv_D



	#Diffusion B
	_dfn_B = __zeros(B.shape)
	_dfn_B += __diffusion(B, J_B, _dfn_cytosolic_1_left, _vol_cytosolic)
	_dfn_B += __diffusion(B, J_B, _dfn_cytosolic_2_left, _vol_cytosolic)
	_d_B += _dfn_B

	#Diffusion C
	_dfn_C = __zeros(C.shape)
	_dfn_C += __diffusion(C, J_C_x, _dfn_extracellular_1_left, _vol_extracellular)
	_dfn_C += __diffusion(C, J_C_y, _dfn_extracellular_2_left, _vol_extracellular)
	_d_C += _dfn_C

	#Diffusion D
	_dfn_D = __zeros(D.shape)
	_dfn_D += __diffusion(D, 1, _dfn_extracellular_1_left, _vol_extracellular)
	_dfn_D += __diffusion(D, 1, _dfn_extracellular_2_left, _vol_extracellular)
	_d_D += _dfn_D



	#Boundary conditions C
	_bc_C = __zeros(C.shape)

	#Dirichlet boundary, C, 2, min
	_bc_C += __Dirichlet(C, J_C_y, __ones(C.shape) * 0, _bc_extracellular_2_min, _vol_extracellular)

	#Dirichlet boundary, C, 2, max
	_bc_C += __Dirichlet(C, J_C_y, __ones(C.shape) * 0, _bc_extracellular_2_max, _vol_extracellular)

	#Neumann boundary, C, 1, min
	_bc_C += __Neumann(C, __ones(C.shape) * 1, _bc_extracellular_1_min, _vol_extracellular)

	#Neumann boundary, C, 1, max
	_bc_C += __Neumann(C, __ones(C.shape) * -1, _bc_extracellular_1_max, _vol_extracellular)

	_d_C += _bc_C


	_d_A += vrb0

	_d_states = __concatenate((_d_A, _d_B, _d_C, _d_D, ))
	return (time, A, B, C, D, k_degA, k_synB, k_synD, k_degD, k_pump, J_B, J_C_x, J_C_y, F_B, F_C_x, F_C_y, vrb0, vrb1, vrb2, vrb3, synB, pumpB, synD, _adv_B, _adv_C, _adv_D, _dfn_B, _dfn_C, _dfn_D, _bc_C, _d_A, _d_B, _d_C, _d_D)