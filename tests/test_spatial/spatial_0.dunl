;M0
;;states
H : [0, 0]
A : [0, 0]
B : [0, 0]
C : [1, 1]

;;parameters
k_synH   : [1,   1]
k_synB   : [10, 10]
k_synH_A : [0.05, 0.05]

J_H_x : [0.1, 0.1]
J_H_y : [0.1, 0.1]
J_A_x : [0.1, 0.1]
J_A_y : [0.1, 0.1]
J_B_x : [0.1, 0.1]
J_B_y : [0.1, 0.1]

F_H_x : [0, 0]
F_H_y : [0, 0]
F_A_x : [0, 0]
F_A_y : [0, 0]
F_B_x : [0.05, 0.05]
F_B_y : [0.05, 0.05]

;;reactions
#Need to infer which reactions apply to bulk/boundary
#name str: [eqn: str, fwd: num|str, rev: num|str]
synH : [      -> H, k_synH*C]
synB : [H + A -> B, k_synB*H*A, k_synH_A*B*1]

;;functions
func0: [x, k, -x*k]

;;variables
vrb0: 'func0(k_synH, C)'
vrb1: 1

;;rates
C: vrb0

;;diffusion
#Must allow scalar and tensor values for each dimension
#name str: [species: str, dim0: str|num|tensor|path, dim1: str|num|tensor|path, dim2: str|num|tensor|path]
H : [J_H_x, J_H_y]
A : [J_A_x, J_A_y]
B : [J_B_x, J_B_y]

;;advection
#Must allow scalar and tensor values for each dimension
#name str: [species: str, dim0: str|num|tensor|path, dim1: str|num|tensor|path, dim2: str|num|tensor|path]
H : [F_H_x, F_H_y]
A : [F_A_x, F_A_y]
B : [F_B_x, F_B_y]

;;compartments
cytosol : [
	domain_type: cytosolic,
	contains   : [A, H, C],
	unit_size  : 1
	]

medium : [
	domain_type: extracellular,
	contains   : [B],
	unit_size  : 1
	]
	
;;boundary_conditions
#If a reaction is specified, a boundary_condition cannot be used
#If neither a reaction nor boundary_condition is specified, assume a Neumann type boundary_condition with flux of zero
#name str: [species: str, expr: str|num, boundary_type: str, coordinate: str|list]
#boundary_type: Neumann, Dirichlet, Robin*
#coordinate: str|[{x, y, z}, {min, max}]
bcBx : [B, -0.05, Neumann, x]
bcBy : [B, 0.1, Dirichlet, y]

;;geometry
;;;coordinate_components
#For now assume only cartesian coordinates are allowed
#name str: [bounds: [min, max], unit: str]
#name: {x, y, z}
#If there is a need to add new kinds of coordinates, add more possible values for name
x: [0, 10]
y: [0, 10]

;;;grid_config
gr_main: [config: [2, [0, 10], [0, 10]], children: [gr_0]]
gr_0   : [config: [1, [2, 8 ], [2, 8 ]], children: [gr_1]]
gr_1   : [config: [0.5, [3, 7 ], [3, 7 ]]                 ]

#SBML ListofDomainTypes
;;;domain_types
#SBML DomainType
#id or name: [spatialDimensions : int, SpatialSymbolReference: Parameter, domains: [domain str: internal_points list]]
extracellular : [
	domains: [
		medium0: [[1, 1]]
		]
	]
cytosolic : [
	domains: [
		cytosol0: [[5, 5]]
		]
	]
#no. of dimensions should be inferred from internal_points
#units should be inferred from coordinate_components

;;;adjacent_domains
#name str: [domain0 str, domain1 str]
cytosol0_medium0: [cytosol0, medium0]

#SBML GeometryDefinition
;;;geometry_definitions
cell : [
	definition : csg,
	domain_type: cytosolic,
	order      : 1,
	node       : [circle, [translate, 5, 5]]
	]

field : [
	definition : csg,
	domain_type: extracellular,
	order      : 0,
	node       : [square, [scale, 5, 4], [translate, 5, 5]]
	]

#More on node
#Each element represents some operation or definition of a shape
#The last element is taken to be the resultant geometry definition
#node: [shape str: primitive str|transformed_primitive dict|operation list, ... ]
#primitive str: {circle, square, sphere, cube, cylinder, cone}
#transformed_primitive dict: [primitive: primitive, **kwargs]
#operation list: [{union, intersection, difference}, shape, shape]