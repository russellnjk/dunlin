import numpy  as np
import pandas as pd

comps  = {'c0': {'size': 1, 'contains': ['x', 'S', 'P', 'Q', 'R', 'M', 'H']}}
states = {'x': [0.1]*2,
          'S': [1e5]*2,
          'P': [0]*2,
          'Q': [0.45*4.16e8]*2,
          'R': [0.05*4.16e8]*2,
          'M': [0.5*4.16e8]*2,
          'H': [0]*2, 
          }
params = {'Mcell'      : [4.16e8]*2,
          'v_uptake'   : [200]*2, 
          'k_uptake'   : [5e3, 1e4],
          'n_uptake'   : [1]*2,
          'ntf'        : [1]*2,
          'yield_S'    : [0.083]*2,
          'v_synprot'  : [1080]*2,
          'k_synprot'  : [5e-3]*2,
          'k_fr'       : [0.05]*2,
          'n_fr'       : [2]*2, 
          'fq'         : [0.45]*2,
          'fr'         : [1]*2,
          'fm'         : [0.65]*2,
          'fh'         : [0.5]*2,
          'k_ind'      : [0.5]*2,
          'k_cm'       : [3]*2,
          'dil'        : [8e-3]*2, 
          'Sin'        : [5e4],
          'ind'        : [0]*2,
          'Cm'         : [0]*2
          }
params = pd.DataFrame.from_dict(params)
vrbs   = {'n_H'          : 'H/300',
          'n_Q'          : 'Q/300',
          'n_M'          : 'M/300',
          'n_R'          : 'R/7459',
          'cells_per_OD' : '2.4e9',
          'uM_cells'     : 'x*cells_per_OD/6e23*1e3*1e6',
          'uptake'       : 'v_uptake*n_M*S**n_uptake/(S**n_uptake + k_uptake**n_uptake)',
          'total_uptake' : 'uptake*uM_cells',
          'all_prot'     : 'Q +R +M +H',
          'P_conc'       : 'P/all_prot',
          'r_sat'        : 'P_conc/(P_conc + k_synprot)',
          'r_inh'        : 'k_cm/(Cm + k_cm)',
          'synprot'      : 'v_synprot*n_R*r_sat*r_inh',
          'PR'           : 'P/R',
          'reg'          : 'PR**n_fr/(k_fr**n_fr + PR**n_fr) *(1-0.046) + 0.046',
          'fr_'          : 'fr*reg',
          'fh_'          : 'fh*ind/(k_ind + ind)',
          'mu'           : 'synprot/Mcell'
          } 
rxns   = {'dil_S' : ['S >', 'dil*S'],
          'dil_x' : ['x >', 'dil*x'],
          'mu_x'  : ['> x', 'mu*x'],
          'mu_P'  : ['P >', 'mu*P'],
          'mu_Q'  : {'Q >', 'mu*Q'},
          'mu_R'  : ['R >', 'mu*R'],
          'mu_M'  : ['M >', 'mu*M'],
          'mu_H'  : ['H >', 'mu*H'],
          'in_S'  : ['> S', 'dil*Sin'],
          'up_S'  : ['S >', 'total_uptake'],
          'synP'  : ['> P', 'uptake*yield_S'],
          'synQ'  : ['> Q', 'synprot*fq'],
          'synR'  : ['> R', 'synprot*(1-fq)*fr_/(fm + fr_ + fh_)'],
          'synM'  : ['> M', 'synprot*(1-fq)*fm /(fm + fr_ + fh_)'],
          'synH'  : ['> H', 'synprot*(1-fq)*fh_/(fm + fr_ + fh_)'],
          'con_P' : ['P >', 'synprot']
          }
funcs   = None